/* CSS는 가장 나중에 적은게 우선순위로 적용됨, 순서도 중요 */
/* 복합 셀렉터 combinator */
/* 태그관계 : 부모자식, 조상자손 */


/* 후손 셀렉터 */
/* 셀럭터A 셀렉터B
div p : div 아래에 있는 p태그를 전부 선택하고 싶을때 */
div p{
    color: red;
}

/* 자식 셀렉터 child combinator*/
/* 셀렉터A > 셀렉터B : A 셀렉터 바로 아래 직계 자식을 선택하고 싶을때*/
div > p{
    color: blue;
}

/* 형제(동위) 셀렉터  sibling combinator */
/* 형제 관계에서 뒤에 위치하는 요소를 선택할 때 사용 */

/* 인접 형제 셀렉터 (셀렉터A + 셀렉터B) : 
셀렉터A의 형제 요소 중 셀렉터A 바로 뒤에 위치하는 셀렉터B 요소를 선택,
A와 B 사이에 다른 요소가 존재하면 선택되지 않는다. */

/* 일반 형제 셀렉터 (셀렉터A ~ 셀렉터B) :
셀렉터A의 형제 요소 중 뒤에 위치하는 셀렉터B 요소를 모두 선택. */

/* 인접 형제 셀렉터 (셀렉터A + 셀렉터B) */
p + ul {
    color: red;
}

/* 일반 형제 셀렉터 (셀렉터A ~ 셀렉터B) */
span ~ ul {
    color: green;
}

/* 가상 클래스 셀렉터 Pseudo-class selector */
/* 요소의 특정상태에 따라 스타일을 정의할 때 사용 */
/* 특정상태란 마우스가 올라와 있을 때,
링크를 방문했을 때, 아직 방문하지 않았을 때,
포커스가 들어와 있을 때 */

a:hover {
    background-color: red;
}
/* input 선택되었을 때(커서가 깜빡거릴때) */
input:focus{
    background-color: yellow;
}

/* 링크 셀렉터 */
/*  : link 셀렉터가 방문하지 않은 링크일 때
    : visited 셀렉터가 방문한 링크일 때 
    : hover 셀렉터에 마우스가 올라와 있을 때
    : active 셀렉터가 클릭된 상태일 때(클릭하는 순간 색이 변경됨)
    : focus 셀렉터에 포커스가 들어와 있을 때 
*/

a:link{
    color : orange;
}
a:visited{
    color: green;
}
a:active{
    font-weight: bold;
}
input[type="text"]:focus {
    color: red;
}
input[type="password"]{
    color: black;
}

/* 구조 가장 클래스 셀렉터 */
/* first-child : 셀렉터에 해당하는 모든 요소 중 첫번째 자식인 요소를 선택 */
/* last-child : 셀렉터에 해당하는 모든 요소 중 마지막 자식인 요소를 선택 */

p:first-child {
    color: red;
}
p:last-child{
    color: blue;
}
/* :nth-child(n), :nth-last-child(n) */
/* :nth-child(n) - 셀렉터에 해당하는 모든 요소 중 앞에서 n번째 자식인 요소를 선택
:nth-last-child(n) - 셀렉터에 해당하는 모든 요소 중 뒤에서 n번째 자식인 요소를 선택 */
/* n은 0부터 시작 */

/* ol 요소의 li 요소 중에서 짝수 번째 요소만을 선택 */
ol > li:nth-child(2n){
    color: orange;
}

/* ol 요소의 li 요소 중에서 홀수 번째 요소만을 선택 */
ol > li:nth-child(2n+1){
    color: violet;
}

/* ol 요소의 li 요소 중에서 첫번째 요소만을 선택 */
ol > li:first-child{
    color: red;
}

/* ol 요소의 li 요소 중에서 마지막 요소만을 선택 */
ol > li:last-child{
    color: blue;
}

/* ol 요소의 li 요소 중에서 네번째 요소만을 선택 */
ol > li:nth-child(4){
    background-color: brown;
}

/* ul의 모든 자식요소들 중에서 뒤에서부터 홀수번째 요소만 선택  */
ul > :nth-last-child(2n+1){
    color: red;
}

/* ul의 모든 자식요소들 중에서 뒤에서부터 짝수번째 요소만 선택  */
ul > :nth-last-child(2n){
    color: pink;
}




